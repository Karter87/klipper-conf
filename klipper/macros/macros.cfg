#####################################################################
#   General Macros
#####################################################################

[gcode_macro DUMP_VARIABLES]
description: Dump all the printer variables, filter 
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}


# https://github.com/kmarty/Dynamic_BED_MESH_CALIBRATE
# to make dynamic meshing work, change start_print in slicer to
# START_PRINT BED_TEMP=[first_layer_bed_temperature] EXTRUDER_TEMP=[first_layer_temperature] AREA_START={first_layer_print_min[0]},{first_layer_print_min[1]} AREA_END={first_layer_print_max[0]},{first_layer_print_max[1]}

[gcode_macro DYNAMIC_LEVELING]
; the clearance between print area and probe area 
variable_mesh_area_offset : 5.0
; minimum probe count
variable_min_probe_count : 3
; scale up the probe count, should be 1.0 ~ < variable_max_probe_count/variable_min_probe_count
variable_probe_count_scale_factor : 1.0
gcode:
    {% if params.AREA_START and params.AREA_END %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}
        
        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
	    {% set area_min_y = params.AREA_START.split(",")[1]|float %}
	    {% set area_max_x = params.AREA_END.split(",")[0]|float %}
	    {% set area_max_y = params.AREA_END.split(",")[1]|float %}
        
        {% set meshPoints = bedMeshConfig.probe_count.split(",") %}
        {% set meshPointX = meshPoints[0]|int %}
        {% set meshPointY = meshPoints[1]|int if meshPoints.__len__() > 1 else meshPointX %}
        
        {% set meshMaxPointX = meshPointX %}
        {% set meshMaxPointY = meshPointY %}

        {% if (bedMeshConfig.algorithm == "bicubic") and (min_probe_count < 4) %}
            {% set min_probe_count = 4 %}
        {% endif %}

        {% if bedMeshConfig.relative_reference_index %}
            {% set relative_reference_index = bedMeshConfig.relative_reference_index %}
        {% else %}
            {% set relative_reference_index = 0 %}
        {% endif %}

        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% set area_min_x = [area_min_x - mesh_area_offset, safe_min_x]|max %}
            {% set area_min_y = [area_min_y - mesh_area_offset, safe_min_y]|max %}
            {% set area_max_x = [area_max_x + mesh_area_offset, safe_max_x]|min %}
            {% set area_max_y = [area_max_y + mesh_area_offset, safe_max_y]|min %}
            
            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
	        
            {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
            
	        {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            { action_respond_info("mesh_min: %s,%s" % (area_min_x, area_min_y)) }
            { action_respond_info("mesh_max: %s,%s" % (area_max_x, area_max_y)) }
            { action_respond_info("probe_count: %s,%s" % (meshPointX, meshPointY)) }

            {% if relative_reference_index > 0 %}
                {% set relative_reference_index = ((meshPointX * meshPointY - 1) / 2)|int|string %}
                { action_respond_info("relative_reference_index: %s" % relative_reference_index) }
                {% set RRI_PH = "relative_reference_index=" + relative_reference_index %}
            {% else %}
                {% set RRI_PH = "" %}
            {% endif %}

             BED_MESH_CALIBRATE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} {RRI_PH}
        {% else %}
            BED_MESH_CALIBRATE
        {% endif %}
    {% else %}
        BED_MESH_CALIBRATE
    {% endif %}


[gcode_macro G29]
gcode:
    BED_MESH_CALIBRATE
    BED_MESH_PROFILE SAVE=default
    G1 X125 Y101 Z10 F4000

[gcode_macro ADD_BED_MESH]
gcode:
    {% set TARGET_TEMP = params.TARGET_TEMP|default(70)|int %}
    M190 S{TARGET_TEMP} # Wait for the bed to hit TARGET_TEMP
    BED_MESH_CALIBRATE
    BED_MESH_PROFILE SAVE={TARGET_TEMP}
    SAVE_CONFIG   
 
[gcode_macro UP]
description: Move 100mm UP
gcode:
    G1 Z100 F1500

[gcode_macro M600]
variable_extr_temp: 0
gcode:
    {% set X = params.X|default(100)|int %}
    {% set Y = params.Y|default(0)|int %}
    {% set Z = params.Z|default(10)|int %}
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000

[gcode_macro _CHECK_HOME]
gcode:
  M117


[delayed_gcode clear_display]
initial_duration: 0.
gcode:
    M117

##  Clear display after Duration  
[delayed_gcode _CLEAR_DISPLAY]
gcode:
    M117

[delayed_gcode clear_display]
initial_duration: 10
gcode:
    M117
